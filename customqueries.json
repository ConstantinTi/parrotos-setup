{
  "queries": [
    {
      "name": "Domains",
      "category": "🧭 Compass: Information Gathering",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (d:Domain) RETURN d"
        }
      ]
    },
    {
      "name": "Domain Controllers",
      "category": "🧭 Compass: Information Gathering",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain Controllers Group...",
          "query": "MATCH (n:Group) WHERE n.objectid ENDS WITH \"-516\" RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p=(c:Computer)-[:MemberOf*1..]->(n:Group {name: $result}) RETURN p",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "High Value Targets",
      "category": "🧭 Compass: Information Gathering",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p = (d:Domain {name: $result})-[r:Contains*1..]->(h {highvalue: true}) RETURN p",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Computers without LAPS",
      "category": "🧭 Compass: Information Gathering",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p = (d:Domain {name: $result})-[r:Contains*1..]->(c:Computer {haslaps: false}) RETURN p"
        }
      ]
    },
    {
      "name": "Owned Principals",
      "category": "🧭 Compass: Information Gathering",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(o {owned: true}) RETURN p"
        }
      ]
    },
    {
      "name": "Sensitive Principals by Keywords",
      "category": "🧭 Compass: Information Gathering",
      "queryList": [
        {
          "final": true,
          "query": "UNWIND ['admin', 'amministratore', 'empfindlich', 'geheim', 'important', 'azure', 'MSOL', 'kennwort', 'pass', 'secret', 'sensib', 'sensitiv'] AS word MATCH (n) WHERE (toLower(n.name) CONTAINS toLower(word)) OR (toLower(n.description) CONTAINS toLower(word)) RETURN n"
        }
      ]
    },
    {
      "name": "Users with Password in AD",
      "category": "🧭 Compass: Accounts",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p = (d:Domain {name: $result})-[r:Contains*1..]->(u:User) WHERE u.userpassword IS NOT NULL RETURN p"
        }
      ]
    },
    {
      "name": "Users with \"Pass\" in AD Description",
      "category": "🧭 Compass: Accounts",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p = (d:Domain {name: $result})-[r:Contains*1..]->(u:User) WHERE u.description =~ '(?i).*pass.*' RETURN p"
        }
      ]
    },
    {
      "name": "Users with Password not Required",
      "category": "🧭 Compass: Accounts",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p = (d:Domain {name: $result})-[r:Contains*1..]->(u:User {passwordnotreqd: true}) RETURN p"
        }
      ]
    },
    {
      "name": "Users with Password never Expiring",
      "category": "🧭 Compass: Accounts",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p = (d:Domain {name: $result})-[r:Contains*1..]->(u:User {pwdneverexpires: True}) WHERE NOT u.name starts with 'KRBTGT' RETURN u"
        }
      ]
    },
    {
      "name": "Users with with Same Name in Different Domains",
      "category": "🧭 Compass: Accounts",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u1:User),(u2:User) WHERE split(u1.name,'@')[0] = split(u2.name,'@')[0] AND u1.domain <> u2.domain AND tointeger(split(u1.objectid,'-')[7]) >= 1000 RETURN u1"
        }
      ]
    },
    {
      "name": "Protected Users",
      "category": "🧭 Compass: Privileged Accounts",
      "queryList": [
        {
          "final": false,
          "title": "Select a Protected Users Group...",
          "query": "MATCH (n:Group) WHERE n.objectid ENDS WITH \"-525\" RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p=(u:User)-[:MemberOf*1..]->(n:Group {name: $result}) RETURN p"
        }
      ]
    },
    {
      "name": "AdminTo Relationships",
      "category": "🧭 Compass: Privileged Accounts",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p=(u {domain: $result})-[r:AdminTo]->(c:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Administrators",
      "category": "🧭 Compass: Privileged Accounts",
      "queryList": [
        {
          "final": false,
          "title": "Select a Administrators Group...",
          "query": "MATCH (n:Group) WHERE n.objectid ENDS WITH \"-544\" RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p=(u:User)-[:MemberOf*1..]->(n:Group {name: $result}) RETURN p"
        }
      ]
    },
    {
      "name": "Computers in Administrators",
      "category": "🧭 Compass: Privileged Accounts",
      "queryList": [
        {
          "final": false,
          "title": "Select a Administrators Group...",
          "query": "MATCH (n:Group) WHERE n.objectid ENDS WITH \"-544\" RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p = (c:Computer)-[r:MemberOf|HasSIDHistory*1..]->(g:Group {name: $result}) RETURN p",
          "endNode": "{}"
        }
      ]
    },
    {
      "name": "Computers Local Admin to Another Computer",
      "category": "🧭 Compass: Privileged Accounts",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p = (c1:Computer {domain: $result})-[r1:AdminTo]->(c2:Computer) RETURN p UNION ALL MATCH p = (c3:Computer {domain: $result})-[r2:MemberOf|HasSIDHistory*1..]->(g:Group)-[r3:AdminTo]->(c4:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Sessions of Administrators on non DCs Computers",
      "category": "🧭 Compass: Privileged Accounts",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH (dc:Computer {domain: $result})-[r1:MemberOf*0..]->(g1:Group) WHERE g1.objectid =~ \"S-1-5-.*-516\" WITH COLLECT(dc) AS exclude MATCH p = (c:Computer {domain: $result})-[n:HasSession]->(u:User)-[r2:MemberOf*1..]->(g2:Group) WHERE NOT c IN exclude and g2.objectid ENDS WITH \"-544\" RETURN p"
        }
      ]
    },
    {
      "name": "DCSync Principals not Administrators",
      "category": "🧭 Compass: Privileged Accounts",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH (admins {domain: $result})-[r1:MemberOf*0..]->(g1:Group) WHERE (g1.objectid =~ \"(?i)S-1-5-.*-512\") OR (g1.objectid =~ \"(?i)S-1-5-.*-516\") OR (g1.objectid =~ \"(?i)S-1-5-.*-518\") OR (g1.objectid =~ \"(?i)S-1-5-.*-519\") OR (g1.objectid =~ \"(?i)S-1-5-.*-520\") OR (g1.objectid =~ \"(?i)S-1-5-.*-544\") OR (g1.objectid =~ \"(?i)S-1-5-.*-548\") OR (g1.objectid =~ \"(?i)S-1-5-.*-549\") OR (g1.objectid =~ \"(?i)S-1-5-.*-551\") WITH COLLECT(admins) AS exclude MATCH p=(n1)-[:MemberOf|GetChanges*0..]->(u:Domain {name: $result}) WHERE NOT n1 IN exclude and (n1:Computer or n1:User) RETURN p"
        }
      ]
    },
    {
      "name": "AS-REP Roastable Principals",
      "category": "🧭 Compass: Kerberos",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH (d:Domain {name: $result})-[r:Contains*1..]->(u {dontreqpreauth: true}) RETURN u"
        }
      ]
    },
    {
      "name": "Kerberoastable Principals",
      "category": "🧭 Compass: Kerberos",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH (d:Domain {name: $result})-[r:Contains*1..]->(u {hasspn: true}) RETURN u"
        }
      ]
    },
    {
      "name": "Kerberoastable Administrators",
      "category": "🧭 Compass: Kerberos",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH (admins {domain: $result})-[r1:MemberOf*0..]->(g1:Group) WHERE (g1.objectid =~ \"(?i)S-1-5-.*-512\") OR (g1.objectid =~ \"(?i)S-1-5-.*-516\") OR (g1.objectid =~ \"(?i)S-1-5-.*-518\") OR (g1.objectid =~ \"(?i)S-1-5-.*-519\") OR (g1.objectid =~ \"(?i)S-1-5-.*-520\") OR (g1.objectid =~ \"(?i)S-1-5-.*-544\") OR (g1.objectid =~ \"(?i)S-1-5-.*-548\") OR (g1.objectid =~ \"(?i)S-1-5-.*-549\") OR (g1.objectid =~ \"(?i)S-1-5-.*-551\") WITH COLLECT(admins) AS filter MATCH (d:Domain {name: $result})-[r:Contains*1..]->(u {hasspn: true}) WHERE u IN filter RETURN u"
        }
      ]
    },
    {
      "name": "Constrained Delegations",
      "category": "🧭 Compass: Kerberos",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p = (a {domain: $result})-[:AllowedToDelegate]->(c:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Constrained Delegations with Protocol Transition (trustedToAuth)",
      "category": "🧭 Compass: Kerberos",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p = (a {domain: $result, trustedtoauth: true})-[:AllowedToDelegate]->(c:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Computers Allowed to Delegate for Another Computer",
      "category": "🧭 Compass: Kerberos",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p = (c1:Computer {domain: $result})-[:AllowedToDelegate]->(c2:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Unconstrained Delegation Principals",
      "category": "🧭 Compass: Kerberos",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH (dca)-[r:MemberOf*0..]->(g:Group) WHERE g.objectid =~ \"S-1-5-.*-516\" OR g.objectid =~ \".*-S-1-5-32-544\" WITH COLLECT(dca) AS exclude MATCH p = (d:Domain {name: $result})-[r:Contains*1..]->(uc {unconstraineddelegation: true}) WHERE (uc:User OR uc:Computer) AND NOT uc IN exclude RETURN p"
        }
      ]
    },
    {
      "name": "Resource-Based Constrained Delegation Principals",
      "category": "🧭 Compass: Kerberos",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p=(m)-[r:AllowedToAct]->(n) RETURN p"
        }
      ]
    },
    {
      "name": "Configure Resource-Based Constrained Delegation Permissions",
      "category": "🧭 Compass: Kerberos",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p=(m)-[r:AddAllowedToAct]->(n) RETURN p"
        }
      ]
    },
    {
      "name": "Interesting GPOs by Keyword",
      "category": "🧭 Compass: Group Policies",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "UNWIND [\"360totalsecurity\", \"access\", \"acronis\", \"adaware\", \"admin\", \"admin\", \"aegislab\", \"ahnlab\", \"alienvault\", \"altavista\", \"amsi\", \"anti-virus\", \"antivirus\", \"antiy\", \"apexone\", \"applock\", \"arcabit\", \"arcsight\", \"atm\", \"atp\", \"av\", \"avast\", \"avg\", \"avira\", \"baidu\", \"baiduspider\", \"bank\", \"barracuda\", \"bingbot\", \"bitdefender\", \"bluvector\", \"canary\", \"carbon\", \"carbonblack\", \"certificate\", \"check\", \"checkpoint\", \"citrix\", \"clamav\", \"code42\", \"comodo\", \"countercept\", \"countertack\", \"credential\", \"crowdstrike\", \"custom\", \"cyberark\", \"cybereason\", \"cylance\", \"cynet360\", \"cyren\", \"darktrace\", \"datadog\", \"defender\", \"druva\", \"drweb\", \"duckduckbot\", \"edr\", \"egambit\", \"emsisoft\", \"encase\", \"endgame\", \"ensilo\", \"escan\", \"eset\", \"exabot\", \"exception\", \"f-secure\", \"f5\", \"falcon\", \"fidelis\", \"fireeye\", \"firewall\", \"fix\", \"forcepoint\", \"forti\", \"fortigate\", \"fortil\", \"fortinet\", \"gdata\", \"gravityzone\", \"guard\", \"honey\", \"huntress\", \"identity\", \"ikarussecurity\", \"insight\", \"ivanti\", \"juniper\", \"k7antivirus\", \"k7computing\", \"kaspersky\", \"kingsoft\", \"kiosk\", \"laps\", \"lightcyber\", \"logging\", \"logrhythm\", \"lynx\", \"malwarebytes\", \"manageengine\", \"mass\", \"mcafee\", \"microsoft\", \"mj12bot\", \"msnbot\", \"nanoav\", \"nessus\", \"netwitness\", \"office365\", \"onedrive\", \"orion\", \"palo\", \"paloalto\", \"paloaltonetworks\", \"panda\", \"pass\", \"powershell\", \"proofpoint\", \"proxy\", \"qradar\", \"rdp\", \"rsa\", \"runasppl\", \"sandboxe\", \"sap\", \"scanner\", \"scanning\", \"sccm\", \"script\", \"secret\", \"secureage\", \"secureworks\", \"security\", \"sensitive\", \"sentinel\", \"sentinelone\", \"slurp\", \"smartcard\", \"sogou\", \"solarwinds\", \"sonicwall\", \"sophos\", \"splunk\", \"superantispyware\", \"symantec\", \"tachyon\", \"temporary\", \"tencent\", \"totaldefense\", \"transfer\", \"trapmine\", \"trend micro\", \"trendmicro\", \"trusteer\", \"trustlook\", \"uac\", \"vdi\", \"virusblokada\", \"virustotal\", \"virustotalcloud\", \"vpn\", \"vuln\", \"webroot\", \"whitelist\", \"wifi\", \"winrm\", \"workaround\", \"yubikey\", \"zillya\", \"zonealarm\", \"zscaler\"] as word match (n:GPO {domain: $result}) where toLower(n.name) CONTAINS toLower(word) RETURN n"
        }
      ]
    },
    {
      "name": "GPO Permissions of Non-Admin Principals",
      "category": "🧭 Compass: Group Policies",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH (u1:user {domain: $result})-[r:MemberOf*1..]->(n:Group) WHERE (n.objectid =~ \"(?i)S-1-5-.*-512\") OR (n.objectid =~ \"(?i)S-1-5-.*-516\") OR (n.objectid =~ \"(?i)S-1-5-.*-518\") OR (n.objectid =~ \"(?i)S-1-5-.*-519\") OR (n.objectid =~ \"(?i)S-1-5-.*-520\") OR (n.objectid =~ \"(?i)S-1-5-.*-544\") OR (n.objectid =~ \"(?i)S-1-5-.*-548\") OR (n.objectid =~ \"(?i)S-1-5-.*-549\") OR (n.objectid =~ \"(?i)S-1-5-.*-551\") WITH COLLECT(u1) AS exclude MATCH p = (u2:User)-[r:AddMember|AddSelf|WriteSPN|AddKeyCredentialLink|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner|Owns]->(g:GPO) WHERE NOT u2 IN exclude RETURN p"
        }
      ]
    },
    {
      "name": "LAPS Passwords Readable by Non-Admin",
      "category": "🧭 Compass: DACL Abuse",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH (u1:user {domain: $result})-[r:MemberOf*1..]->(n:Group) WHERE (n.objectid =~ \"(?i)S-1-5-.*-512\") OR (n.objectid =~ \"(?i)S-1-5-.*-516\") OR (n.objectid =~ \"(?i)S-1-5-.*-518\") OR (n.objectid =~ \"(?i)S-1-5-.*-519\") OR (n.objectid =~ \"(?i)S-1-5-.*-520\") OR (n.objectid =~ \"(?i)S-1-5-.*-544\") OR (n.objectid =~ \"(?i)S-1-5-.*-548\") OR (n.objectid =~ \"(?i)S-1-5-.*-549\") OR (n.objectid =~ \"(?i)S-1-5-.*-551\") WITH COLLECT(u1) AS exclude MATCH p = (u2)-[r1:MemberOf*1..]->(g:Group)-[r2:GenericAll]->(t:Computer {haslaps:true}) WHERE NOT u2 IN exclude RETURN p"
        }
      ]
    },
    {
      "name": "LAPS Passwords Readable by Owned Principals",
      "category": "🧭 Compass: DACL Abuse",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n {owned: true})-[r1:MemberOf*1..]->(g:Group)-[r2:GenericAll]->(t:Computer {haslaps:true}) RETURN p"
        }
      ]
    },
    {
      "name": "ACLs to Computers (excluding High Value Targets)",
      "category": "🧭 Compass: DACL Abuse",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p = (ucg {highvalue: false})-[r {isacl: true}]->(c:Computer {domain: $result}) WHERE (ucg:User OR ucg:Computer OR ucg:Group) RETURN p"
        }
      ]
    },
    {
      "name": "Group Delegated Outbound Object Control of Owned Principals",
      "category": "🧭 Compass: DACL Abuse",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n {owned: true})-[r1:MemberOf*1..]->(g:Group)-[r2 {isacl: true}]->(t) RETURN p"
        }
      ]
    },
    {
      "name": "Dangerous Rights for Groups under Domain Users",
      "category": "🧭 Compass: DACL Abuse",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p=(m:Group {domain: $result})-[r1:MemberOf*1..]->(g:Group)-[:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(n) WHERE m.objectid ENDS WITH '-513' RETURN p"
        }
      ]
    },
    {
      "name": "Set DCSync Principals as High Value Targets",
      "category": "🧭 Compass: Adding High-Value Targets",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (s)-[r:MemberOf|GetChanges*1..]->(d:Domain) WITH s, d MATCH (s)-[r:MemberOf|GetChangesAll*1..]->(d) WITH s, d MATCH p = (s)-[r:MemberOf|GetChanges|GetChangesAll*1..]->(d) WHERE s.highvalue = false SET s.highvalue = true, s.highvaluereason = 'DCSync Principal' RETURN p"
        }
      ]
    },
    {
      "name": "Set Unconstrained Delegation Principals as High Value Targets",
      "category": "🧭 Compass: Adding High-Value Targets",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(uc) WHERE (uc:User OR uc:Computer) AND uc.unconstraineddelegation = true AND uc.highvalue = false SET uc.highvalue = true, uc.highvaluereason = 'Unconstrained Delegation Principal' RETURN p"
        }
      ]
    },
    {
      "name": "Set Local Admin or Reset Password Principals as High Value Targets",
      "category": "🧭 Compass: Adding High-Value Targets",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (a)-[r:AdminTo|ForceChangePassword]->(b) WHERE a.highvalue = false SET a.highvalue = true, a.highvaluereason = 'Local Admin or Reset Password Principal' RETURN a"
        }
      ]
    },
    {
      "name": "Set Principals with Privileges on Computers as High Value Targets",
      "category": "🧭 Compass: Adding High-Value Targets",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (a)-[r:AllowedToDelegate|ExecuteDCOM|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner]->(n:Computer) WHERE a.highvalue = false SET a.highvalue = true, a.highvaluereason = 'Principal with Privileges on Computers' RETURN a"
        }
      ]
    },
    {
      "name": "Set Principals with Privileges on Cert Publishers as High Value Targets",
      "category": "🧭 Compass: Adding High-Value Targets",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (a)-[r:GenericAll|GenericWrite|MemberOf|Owns|WriteDacl|WriteOwner]->(g:Group) WHERE g.objectid =~ 'S-1-5-21-.*-517' AND a.highvalue = false SET a.highvalue = true, a.highvaluereason = 'Principal with Privileges on the Cert Publisher group' RETURN a"
        }
      ]
    },
    {
      "name": "Set Members of High Value Targets Groups as High Value Targets",
      "category": "🧭 Compass: Adding High-Value Targets",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (a)-[r:MemberOf*1..]->(g:Group) WHERE a.highvalue = false AND g.highvalue = true SET a.highvalue = true, a.highvaluereason = 'Member of High Value Target Group' RETURN a"
        }
      ]
    },
    {
      "name": "Remove Inactive Users and Computers from High Value Targets",
      "category": "🧭 Compass: Adding High-Value Targets",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (uc) WHERE uc.highvalue = true AND ((uc:User AND uc.enabled = false) OR (uc:Computer AND ((uc.enabled = false) OR (uc.lastlogon > 0 AND uc.lastlogon < (TIMESTAMP() / 1000 - 15552000)) OR (uc.lastlogontimestamp > 0 AND uc.lastlogontimestamp < (TIMESTAMP() / 1000 - 15552000))))) SET uc.highvalue = false, uc.nothighvaluereason = 'Inactive' RETURN uc"
        }
      ]
    },
    {
      "name": "Shortest Paths to Domain (including Computers)",
      "category": "🧭 Compass: Shortest Paths",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (d:Domain) RETURN d.name ORDER BY d.name ASC"
        },
        {
          "final": true,
          "query": "MATCH p = allShortestPaths((uc)-[r:{}*1..]->(d:Domain {name: $result})) WHERE (uc:User OR uc:Computer) RETURN p",
          "endNode": "{}"
        }
      ]
    },
    {
      "name": "Shortest Paths to no LAPS",
      "category": "🧭 Compass: Shortest Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = allShortestPaths((uc)-[r:{}*1..]->(c:Computer)) WHERE (uc:User OR uc:Computer) AND NOT uc = c AND c.haslaps = false RETURN p"
        }
      ]
    },
    {
      "name": "Shortest Paths from Kerberoastable Users to Computers",
      "category": "🧭 Compass: Shortest Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = allShortestPaths((u:User)-[r:{}*1..]->(c:Computer)) WHERE u.hasspn = true RETURN p"
        }
      ]
    },
    {
      "name": "Shortest Paths from Kerberoastable Users to High Value Targets",
      "category": "🧭 Compass: Shortest Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = allShortestPaths((u:User)-[r:{}*1..]->(h)) WHERE u.hasspn = true AND h.highvalue = true RETURN p"
        }
      ]
    },
    {
      "name": "Shortest Paths from Owned Principals (including everything)",
      "category": "🧭 Compass: Shortest Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = allShortestPaths((u:User)-[r:{}*1..]->(a)) WHERE u.owned = true AND u <> a RETURN p"
        }
      ]
    },
    {
      "name": "Shortest Paths from Owned Principals to Domain",
      "category": "🧭 Compass: Shortest Paths",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (d:Domain) RETURN d.name ORDER BY d.name ASC"
        },
        {
          "final": true,
          "query": "MATCH p = allShortestPaths((o)-[r:{}*1..]->(d:Domain)) WHERE o.owned = true AND d.name = $result RETURN p",
          "endNode": "{}"
        }
      ]
    },
    {
      "name": "Shortest Paths from Owned Principals to High Value Targets",
      "category": "🧭 Compass: Shortest Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = allShortestPaths((o)-[r:{}*1..]->(h)) WHERE o.owned = true AND h.highvalue = true RETURN p"
        }
      ]
    },
    {
      "name": "Shortest Paths from Owned Principals to no LAPS",
      "category": "🧭 Compass: Shortest Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = allShortestPaths((o)-[r:{}*1..]->(c:Computer)) WHERE NOT o = c AND o.owned = true AND c.haslaps = false RETURN p"
        }
      ]
    },
    {
      "name": "Shortest Paths from no Signing to Domain",
      "category": "🧭 Compass: Shortest Paths",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain...",
          "query": "MATCH (d:Domain) RETURN d.name ORDER BY d.name ASC"
        },
        {
          "final": true,
          "query": "MATCH p = allShortestPaths((c:Computer)-[r:{}*1..]->(d:Domain)) WHERE c.hassigning = false AND d.name = $result RETURN p",
          "endNode": "{}"
        }
      ]
    },
    {
      "name": "Shortest Paths from no Signing to High Value Targets",
      "category": "🧭 Compass: Shortest Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = allShortestPaths((c:Computer)-[r:{}*1..]->(h)) WHERE NOT c = h AND c.hassigning = false AND h.highvalue = true RETURN p"
        }
      ]
    },
    {
      "name": "Shortest Paths from Domain Users and Domain Computers (including everything)",
      "category": "🧭 Compass: Shortest Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = allShortestPaths((g:Group)-[r:{}*1..]->(a)) WHERE (g.objectid =~ $domain_users_id OR g.objectid =~ $domain_computers_id) AND g <> a RETURN p",
          "props": {
            "domain_users_id": "S-1-5-.*-513",
            "domain_computers_id": "S-1-5-.*-515"
          }
        }
      ]
    },
    {
      "name": "Find all Certificate Templates",
      "category": "🔏 Certipy: Certificates",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n"
        }
      ]
    },
    {
      "name": "Find enabled Certificate Templates",
      "category": "🔏 Certipy: Certificates",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.Enabled = true RETURN n"
        }
      ]
    },
    {
      "name": "Find Certificate Authorities",
      "category": "🔏 Certipy: Certificates",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n"
        }
      ]
    },
    {
      "name": "Show Enrollment Rights for Certificate Template",
      "category": "🔏 Certipy: Certificates",
      "queryList": [
        {
          "final": false,
          "title": "Select a Certificate Template...",
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n.name"
        },
        {
          "final": true,
          "query": "MATCH p=(g)-[:Enroll|AutoEnroll]->(n:GPO {name:$result}) WHERE n.type = 'Certificate Template' return p",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Show Rights for Certificate Authority",
      "category": "🔏 Certipy: Certificates",
      "queryList": [
        {
          "final": false,
          "title": "Select a Certificate Authority...",
          "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n.name"
        },
        {
          "final": true,
          "query": "MATCH p=(g)-[:ManageCa|ManageCertificates|Auditor|Operator|Read|Enroll]->(n:GPO {name:$result}) return p",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Find Misconfigured Certificate Templates (ESC1)",
      "category": "🔏 Certipy: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true  RETURN n"
        }
      ]
    },
    {
      "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC1)",
      "category": "🔏 Certipy: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true return p"
        }
      ]
    },
    {
      "name": "Find Misconfigured Certificate Templates (ESC2)",
      "category": "🔏 Certipy: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or n.`Any Purpose` = True) RETURN n"
        }
      ]
    },
    {
      "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC2)",
      "category": "🔏 Certipy: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or n.`Any Purpose` = True) RETURN p"
        }
      ]
    },
    {
      "name": "Find Enrollment Agent Templates (ESC3)",
      "category": "🔏 Certipy: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage` or n.`Any Purpose` = True) RETURN n"
        }
      ]
    },
    {
      "name": "Shortest Paths to Enrollment Agent Templates from Owned Principals (ESC3)",
      "category": "🔏 Certipy: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or n.`Any Purpose` = True or 'Certificate Request Agent' IN n.`Extended Key Usage`) RETURN p"
        }
      ]
    },
    {
      "name": "Shortest Paths to Vulnerable Certificate Template Access Control (ESC4)",
      "category": "🔏 Certipy: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((g)-[:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true RETURN p"
        }
      ]
    },
    {
      "name": "Shortest Paths to Vulnerable Certificate Template Access Control from Owned Principals (ESC4)",
      "category": "🔏 Certipy: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=allShortestPaths((g {owned:true})-[r*1..]->(n:GPO)) WHERE g<>n and n.type = 'Certificate Template' and n.Enabled = true and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') return p"
        }
      ]
    },
    {
      "name": "Find Certificate Authorities with User Specified SAN (ESC6)",
      "category": "🔏 Certipy: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`User Specified SAN` = 'Enabled' RETURN n"
        }
      ]
    },
    {
      "name": "Shortest Paths to Vulnerable Certificate Authority Access Control (ESC7)",
      "category": "🔏 Certipy: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((g)-[r:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ManageCa|ManageCertificates*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Enrollment Service' RETURN p"
        }
      ]
    },
    {
      "name": "Shortest Paths to Vulnerable Certificate Authority Access Control from Owned Principals (ESC7)",
      "category": "🔏 Certipy: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Enrollment Service' and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') RETURN p"
        }
      ]
    },
    {
      "name": "Find Certificate Authorities with HTTP Web Enrollment (ESC8)",
      "category": "🔏 Certipy: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`Web Enrollment` = 'Enabled' RETURN n"
        }
      ]
    },
    {
      "name": "Find Unsecured Certificate Templates (ESC9)",
      "category": "🔏 Certipy: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true  RETURN n"
        }
      ]
    },
    {
      "name": "Find Unsecured Certificate Templates (ESC9)",
      "category": "🔏 Certipy: PKI",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and 'NoSecurityExtension' in n.`Enrollment Flag` and n.`Enabled` = true  RETURN n"
        }
      ]
    },
    {
      "name": "Shortest Paths to Unsecured Certificate Templates from Owned Principals (ESC9)",
      "category": "🔏 Certipy: PKI",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=allShortestPaths((g {owned:true})-[r*1..]->(n:GPO)) WHERE n.type = 'Certificate Template' and g<>n and 'NoSecurityExtension' in n.`Enrollment Flag` and n.`Enabled` = true and NONE(rel in r WHERE type(rel) in ['EnabledBy','Read','ManageCa','ManageCertificates']) return p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "List all owned users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:User) WHERE m.owned=TRUE RETURN m"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "List all owned computers",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:Computer) WHERE m.owned=TRUE RETURN m"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "List all owned groups",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:Group) WHERE m.owned=TRUE RETURN m"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "List all High Valued Targets",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m) WHERE m.highvalue=TRUE RETURN m"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "List the groups of all owned users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:User) WHERE m.owned=TRUE WITH m MATCH p=(m)-[:MemberOf*1..]->(n:Group) RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find the Shortest path to a high value target from an owned object",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((g {owned:true})-[*1..]->(n {highvalue:true})) WHERE  g<>n return p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find the Shortest path to a unconstrained delegation system from an owned object",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n) MATCH p=shortestPath((n)-[*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m AND n.owned = true RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find all Kerberoastable Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User)WHERE n.hasspn=true RETURN n",
          "allowCollapse": false
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set less than 5 years ago",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u.name, u.pwdlastset order by u.pwdlastset "
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find Kerberoastable Users with a path to DA",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User {hasspn:true}) MATCH (g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = shortestPath( (u)-[*1..]->(g) ) RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find machines Domain Users can RDP into",
      "queryList": [
        {
          "final": true,
          "query": "match p=(g:Group)-[:CanRDP]->(c:Computer) where g.objectid ENDS WITH '-513' return p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find what groups can RDP",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find groups that can reset passwords (Warning: Heavy)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find groups that have local admin rights (Warning: Heavy)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find all users that have local admin rights",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find all active Domain Admin sessions",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = (c:Computer)-[:HasSession]->(n) return p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find all computers with Unconstrained Delegation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer {unconstraineddelegation:true}) return c"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find all computers with unsupported operating systems",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer) WHERE H.operatingsystem = '.*(2000|2003|2008|xp|vista|7|me).*' RETURN H"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find users that logged in within the last 90 days",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find users with passwords last set within the last 90 days",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find constrained delegation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User)-[:AllowedToDelegate]->(c:Computer) RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find computers that allow unconstrained delegation that AREN’T domain controllers.",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": " Return the name of every computer in the database where at least one SPN for the computer contains the string 'MSSQL'",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') RETURN c"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "View all GPOs",
      "queryList": [
        {
          "final": true,
          "query": "Match (n:GPO) RETURN n"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "View all groups that contain the word 'admin'",
      "queryList": [
        {
          "final": true,
          "query": "Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find users that can be AS-REP roasted",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set > 5 years ago",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE n.hasspn=true AND WHERE u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Show all high value target's groups",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find groups that contain both users and computers",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find Kerberoastable users who are members of high value groups",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User)-[r:MemberOf*1..]->(g:Group) WHERE g.highvalue=true AND u.hasspn=true RETURN u"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find Kerberoastable users and where they are AdminTo",
      "queryList": [
        {
          "final": true,
          "query": "OPTIONAL MATCH (u1:User) WHERE u1.hasspn=true OPTIONAL MATCH (u1)-[r:AdminTo]->(c:Computer) RETURN u"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find if any domain user has interesting permissions against a GPO (Warning: Heavy)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find if unprivileged users have rights to add members into groups",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find all users a part of the VPN group",
      "queryList": [
        {
          "final": true,
          "query": "Match p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find users that have never logged on and account is still active",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n "
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find an object in one domain that can do something to a foreign object",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(n)-[r]->(m) WHERE NOT n.domain = m.domain RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find all sessions a user in a specific domain has",
      "requireNodeSelect": true,
      "queryList": [
        {
          "final": false,
          "title": "Select source domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
        },
        {
          "final": true,
          "query": "MATCH p=(m:Computer)-[r:HasSession]->(n:User {domain:{result}}) RETURN p",
          "startNode": "{}",
          "allowCollapse": false
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find an object from domain 'A' that can do anything to a foreign object",
      "requireNodeSelect": true,
      "queryList": [
        {
          "final": false,
          "title": "Select source domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
        },
        {
          "final": true,
          "query": "MATCH p=(n {domain:{result}})-[r]->(d) WHERE NOT d.domain=n.domain RETURN p",
          "startNode": "{}",
          "allowCollapse": false
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find All edges any owned user has on a computer",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((m:User)-[r*]->(b:Computer)) WHERE m.owned RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "----------------------------------------AZURE QUERIES----------------------------------",
      "queryList": [
        {
          "final": true,
          "query": ""
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Return All Azure Users that are part of the 'Global Administrator' Role",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p =(n)-[r:AZGlobalAdmin*1..]->(m) RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Return All On-Prem users with edges to Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH  p=(m:User)-[r:AZResetPassword|AZOwns|AZUserAccessAdministrator|AZContributor|AZAddMembers|AZGlobalAdmin|AZVMContributor|AZOwnsAZAvereContributor]->(n) WHERE m.objectid CONTAINS 'S-1-5-21' RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find all paths to an Azure VM",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[r]->(g:AZVM) RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find all paths to an Azure KeyVault",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[r]->(g:AZKeyVault) RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Return All Azure Users and their Groups",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:AZUser)-[r:MemberOf]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Return All Azure AD Groups that are synchronized with On-Premise AD",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:Group) WHERE n.objectid CONTAINS 'S-1-5' AND n.azsyncid IS NOT NULL RETURN n"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find all Privileged Service Principals",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (g:AZServicePrincipal)-[r]->(n) RETURN p"
        }
      ]
    },
    {
      "category": "💻 Hausec",
      "name": "Find all Owners of Azure Applications",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[r:AZOwns]->(g:AZApp) RETURN p"
        }
      ]
    },
    {
      "name": "Return All Azure Users that are part of the 'Global Administrator' Role",
      "category": "ZephrFish: Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p =(n)-[r:AZGlobalAdmin*1..]->(m) RETURN p"
        }
      ]
    },
    {
      "name": "Return All On-Prem users with edges to Azure",
      "category": "ZephrFish: Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH  p=(m:User)-[r:AZResetPassword|AZOwns|AZUserAccessAdministrator|AZContributor|AZAddMembers|AZGlobalAdmin|AZVMContributor|AZOwnsAZAvereContributor]->(n) WHERE m.objectid CONTAINS 'S-1-5-21' RETURN p"
        }
      ]
    },
    {
      "name": "Find all paths to an Azure VM",
      "category": "ZephrFish: Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[r]->(g:AZVM) RETURN p"
        }
      ]
    },
    {
      "name": "Find all paths to an Azure KeyVault",
      "category": "ZephrFish: Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[r]->(g:AZKeyVault) RETURN p"
        }
      ]
    },
    {
      "name": "Return All Azure Users and their Groups (Warning: Heavy)",
      "category": "ZephrFish: Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:AZUser)-[r:AZMemberOf*1..]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' RETURN p"
        }
      ]
    },
    {
      "name": "Return GUEST Azure Users and their Groups",
      "category": "ZephrFish: Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:AZUser)-[r:AZMemberOf*1..]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' AND m.userprincipalname=~ '(?i).*#EXT#.*' RETURN p"
        }
      ]
    },
    {
      "name": "Return All Azure Users and their Admin Roles",
      "category": "ZephrFish: Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(n)-[:AZHasRole|AZMemberOf*1..]->(:AZRole) RETURN p"
        }
      ]
    },
    {
      "name": "Return All Azure Users and their owned Devices (Warning: Heavy)",
      "category": "ZephrFish: Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(d:AZDevice)<-[r1:AZOwns]->(m:AZUser) RETURN p"
        }
      ]
    },
    {
      "name": "Return All Azure Admins and their owned Devices",
      "category": "ZephrFish: Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(d:AZDevice)<-[r1:AZOwns]->(m:AZUser)<-[r2:AZHasRole]->(n) RETURN p"
        }
      ]
    },
    {
      "name": "Return All Azure AD Groups that are synchronized with On-Premise AD",
      "category": "ZephrFish: Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:Group) WHERE n.objectid CONTAINS 'S-1-5' AND n.azsyncid IS NOT NULL RETURN n"
        }
      ]
    },
    {
      "name": "Find all Privileged Service Principals",
      "category": "ZephrFish: Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (g:AZServicePrincipal)-[r]->(n) RETURN p"
        }
      ]
    },
    {
      "name": "Find all Owners of Azure Applications",
      "category": "ZephrFish: Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[r:AZOwns]->(g:AZApp) RETURN p"
        }
      ]
    },
    {
      "name": "Find the Shortest path to a high value target from an owned object",
      "category": "ZephrFish: Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((g {owned:true})-[*1..]->(n {highvalue:true})) WHERE  g<>n return p"
        }
      ]
    },
    {
      "name": "Find the Shortest path to a unconstrained delegation system from an owned object",
      "category": "ZephrFish: Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n) MATCH p=shortestPath((n)-[*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m AND n.owned = true RETURN p"
        }
      ]
    },
    {
      "name": "Find all Certificate Templates",
      "category": "ZephrFish: Certificates",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n"
        }
      ]
    },
    {
      "name": "Find enabled Certificate Templates",
      "category": "ZephrFish: Certificates",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.Enabled = true RETURN n"
        }
      ]
    },
    {
      "name": "Find Certificate Authorities",
      "category": "ZephrFish: Certificates",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n"
        }
      ]
    },
    {
      "name": "Show Enrollment Rights for Certificate Template",
      "category": "ZephrFish: Certificates",
      "queryList": [
        {
          "final": false,
          "title": "Select a Certificate Template...",
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n.name"
        },
        {
          "final": true,
          "query": "MATCH p=(g)-[:Enroll|AutoEnroll]->(n:GPO {name:$result}) WHERE n.type = 'Certificate Template' return p",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Show Rights for Certificate Authority",
      "category": "ZephrFish: Certificates",
      "queryList": [
        {
          "final": false,
          "title": "Select a Certificate Authority...",
          "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n.name"
        },
        {
          "final": true,
          "query": "MATCH p=(g)-[:ManageCa|ManageCertificates|Auditor|Operator|Read|Enroll]->(n:GPO {name:$result}) return p",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Find Misconfigured Certificate Templates (ESC1)",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true  RETURN n"
        }
      ]
    },
    {
      "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC1)",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true return p"
        }
      ]
    },
    {
      "name": "Find Misconfigured Certificate Templates (ESC2)",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`)  RETURN n"
        }
      ]
    },
    {
      "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC2)",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`) return p"
        }
      ]
    },
    {
      "name": "Find Enrollment Agent Templates (ESC3)",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`)  RETURN n"
        }
      ]
    },
    {
      "name": "Shortest Paths to Enrollment Agent Templates from Owned Principals (ESC3)",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`) return p"
        }
      ]
    },
    {
      "name": "Shortest Paths to Vulnerable Certificate Template Access Control (ESC4)",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((g)-[:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true RETURN p"
        }
      ]
    },
    {
      "name": "Shortest Paths to Vulnerable Certificate Template Access Control from Owned Principals (ESC4)",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=allShortestPaths((g {owned:true})-[r*1..]->(n:GPO)) WHERE g<>n and n.type = 'Certificate Template' and n.Enabled = true and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') return p"
        }
      ]
    },
    {
      "name": "Find Certificate Authorities with User Specified SAN (ESC6)",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`User Specified SAN` = 'Enabled' RETURN n"
        }
      ]
    },
    {
      "name": "Shortest Paths to Vulnerable Certificate Authority Access Control (ESC7)",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((g)-[r:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ManageCa|ManageCertificates*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Enrollment Service' RETURN p"
        }
      ]
    },
    {
      "name": "Shortest Paths to Vulnerable Certificate Authority Access Control from Owned Principals (ESC7)",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Enrollment Service' and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') RETURN p"
        }
      ]
    },
    {
      "name": "Find Certificate Authorities with HTTP Web Enrollment (ESC8)",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`Web Enrollment` = 'Enabled' RETURN n"
        }
      ]
    },
    {
      "name": "Find users with blank passwords that are enabled",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE NOT u.userpassword IS null AND u.enabled = TRUE RETURN u.name,u.userpassword"
        }
      ]
    },
    {
      "name": "Find users with Temp in user title and created in the last 30 days",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) where u.enabled=TRUE and u.whencreated  > (datetime().epochseconds - (30 * 86400)) AND u.title CONTAINS 'Temp' RETURN u"
        }
      ]
    },
    {
      "name": "Find users created in the last 30 days",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) where u.enabled=TRUE and u.whencreated  > (datetime().epochseconds - (30 * 86400)) RETURN u"
        }
      ]
    },
    {
      "name": "Find users' credentials in description fields",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:User) WHERE m.description CONTAINS 'password' RETURN m.name, m.description"
        }
      ]
    },
    {
      "name": "Find Server 2000 and Enabled",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2000).*' AND H.enabled = TRUE RETURN H"
        }
      ]
    },
    {
      "name": "Find Server 2000 with session",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2000).*' RETURN H"
        }
      ]
    },
    {
      "name": "Find Server 2003 and Enabled",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2003).*' AND H.enabled = TRUE RETURN H"
        }
      ]
    },
    {
      "name": "All computers without LAPS and the computer is enabled",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.haslaps = false AND c.enabled = true RETURN p"
        }
      ]
    },
    {
      "name": "Find Server 2003 with session",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2003).*' RETURN H"
        }
      ]
    },
    {
      "name": "Find Server 2008 and Enabled",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2008).*' AND H.enabled = TRUE RETURN H"
        }
      ]
    },
    {
      "name": "List all owned users",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:User) WHERE m.owned=TRUE RETURN m"
        }
      ]
    },
    {
      "name": "Kerberoastable Admins",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:Group) WHERE n.objectsid =~ $sid WITH n MATCH p=(n)<-[MemberOf*1..]-(m {hasspn: true}) RETURN p",
          "allowCollapse": true,
          "props": {
            "sid": "(?i)S-1-5-.*-512"
          }
        }
      ]
    },
    {
      "name": "All Kerberoastable Users",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "requireNodeSelect": false,
          "query": "MATCH (n {hasspn: true}) RETURN n",
          "allowCollapse": true,
          "props": {}
        }
      ]
    },
    {
      "name": "Where can owned users RDP",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "requireNodeSelect": false,
          "query": "MATCH p=(m:User {owned: true})-[r:MemberOf|CanRDP*1..]->(n:Computer) RETURN p",
          "allowCollapse": true,
          "props": {}
        }
      ]
    },
    {
      "name": "Users with most local admin rights",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": true,
          "requireNodeSelect": false,
          "query": "MATCH (U:User)-[r:MemberOf|AdminTo*1..]->(C:Computer) WITH U.name as n, COUNT(DISTINCT(C)) AS c RETURN n,c ORDER BY c DESC LIMIT 5",
          "allowCollapse": true,
          "props": {}
        }
      ]
    },
    {
      "name": "All Owned Nodes",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "requireNodeSelect": false,
          "query": "MATCH (n {owned: true}) RETURN n",
          "allowCollapse": true,
          "props": {}
        }
      ]
    },
    {
      "name": "Find computers with owned Admins",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((n:User {owned:true})-[r:AdminTo|MemberOf*1..]->(c:Computer)) return p",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Find owned Groups",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "requireNodeSelect": false,
          "query": "MATCH (n:User {owned: true})-[r:MemberOf]->(g:Group) RETURN g",
          "allowCollapse": true,
          "props": {}
        }
      ]
    },
    {
      "name": "Find owned Domain Admins",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": true,
          "title": "Select a domain...",
          "query": "MATCH (n:Group) WHERE n.name =~ $name AND n.owned=true WITH n MATCH p=(n)<-[r:MemberOf*1..]-(m) RETURN p",
          "props": {
            "name": "(?i).*DOMAIN ADMINS.*"
          },
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Find Shortest Path from owned Node to Domain Admin",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": false,
          "title": "Select a Domain Admin group...",
          "query": "MATCH (n:Group) WHERE n.name =~ $name RETURN n.name ORDER BY n.name DESC",
          "props": {
            "name": "(?i).*DOMAIN ADMINS.*"
          }
        },
        {
          "final": true,
          "query": "MATCH (n:User),(m:Group {name:$result}),p=shortestPath((n {owned:true})-[r:MemberOf|AdminTo|HasSession|Contains|GpLink|Owns|DCSync|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner*1..]->(m)) RETURN p",
          "allowCollapse": true,
          "endNode": "{}"
        }
      ]
    },
    {
      "name": "Shortest paths from owned objects to High Value Targets (5 hops)",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((n {owned:true})-[:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote*1..5]->(m {highvalue:true})) WHERE NOT n=m RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Most exploitable paths from owned objects to High Value Targets (5 hops)",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=allShortestPaths((n {owned:true})-[:MemberOf|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory*1..5]->(m {highvalue:true})) WHERE NOT n=m RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Next steps (5 hops) from owned objects",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((c {owned: true})-[*1..5]->(s)) WHERE NOT c = s RETURN p"
        }
      ]
    },
    {
      "name": "Unconstrained Delegation systems",
      "category": "ZephrFish: Delegation Attacks",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c {unconstraineddelegation:true}) return c"
        }
      ]
    },
    {
      "name": "Constrained Delegation systems",
      "category": "ZephrFish: Delegation Attacks",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u)-[:AllowedToDelegate]->(c) RETURN p"
        }
      ]
    },
    {
      "name": "Unconstrained Delegation systems (without domain controllers)",
      "category": "ZephrFish: Delegation Attacks",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2 {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2"
        }
      ]
    },
    {
      "name": "(Warning: edits the DB) Mark unconstrained delegation systems as high value targets",
      "category": "ZephrFish: Delegation Attacks",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2 {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers SET c2.highvalue = true RETURN c2"
        }
      ]
    },
    {
      "name": "Shortest paths from owned principals to unconstrained delegation systems",
      "category": "ZephrFish: Delegation Attacks",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n {owned:true}) MATCH p=shortestPath((n)-[:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m RETURN p"
        }
      ]
    },
    {
      "name": "Users with adminCount, not sensitive for delegation, not members of Protected Users",
      "category": "ZephrFish: Group Hunts",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.objectid =~ \"(?i)S-1-5-.*-525\" WITH COLLECT (u.name) as protectedUsers MATCH p=(u2:User)-[:MemberOf*1..3]->(g2:Group) WHERE u2.admincount=true AND u2.sensitive=false AND NOT u2.name IN protectedUsers RETURN p"
        }
      ]
    },
    {
      "name": "Groups that contain the word 'admin'",
      "category": "ZephrFish: Group Hunts",
      "queryList": [
        {
          "final": true,
          "query": "Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n"
        }
      ]
    },
    {
      "name": "Find users that can RDP into something",
      "category": "ZephrFish: PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "match (u1:User) WHERE u1.plaintext=True MATCH p1=(u1)-[:CanRDP*1..]->(c:Computer) RETURN u1",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find users that belong to high value groups",
      "category": "ZephrFish: PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "match (u1:User) WHERE u1.plaintext=True MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find kerberoastable users",
      "category": "ZephrFish: PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "match (u1:User) WHERE u1.plaintext=True AND u1.hasspn=True RETURN u1",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Return users with seasons in their password and are high value targets",
      "category": "ZephrFish: PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Return users with seasons in their password and have local admin on at least one computer",
      "category": "ZephrFish: PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" match p=(u1:User)-[r:AdminTo]->(n:Computer) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Return users with seasons in their password and a path to high value targets (limit to 25 results)",
      "category": "ZephrFish: PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" MATCH p=shortestPath((u1:User)-[*1..]->(n {highvalue:true})) WHERE  u1<>n return u1 LIMIT 25",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Return users with a variant of \"password\" in their password and are high value targets",
      "category": "ZephrFish: PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\" MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Return users with a variant of \"password\" in their password and have local admin on at least one computer",
      "category": "ZephrFish: PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\" match p=(u1:User)-[r:AdminTo]->(n:Computer) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Return users with a variant of \"password\" in their password and a path to high value targets (limit to 25 results)",
      "category": "ZephrFish: PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\"  MATCH p=shortestPath((u1:User)-[*1..]->(n {highvalue:true})) WHERE  u1<>n return u1 LIMIT 25",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Groups of High Value Targets",
      "category": "ZephrFish: Group Hunts",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p"
        }
      ]
    },
    {
      "name": "Non Admin Groups with High Value Privileges",
      "category": "ZephrFish: Group Hunts",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(g:Group)-[r:Owns|:WriteDacl|:GenericAll|:WriteOwner|:ExecuteDCOM|:GenericWrite|:AllowedToDelegate|:ForceChangePassword]->(n:Computer) WHERE NOT g.name CONTAINS 'ADMIN' RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Groups with Computer and User Objects",
      "category": "ZephrFish: Group Hunts",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers",
          "allowCollapse": true,
          "endNode": "{}"
        }
      ]
    },
    {
      "name": "Groups that can reset passwords (Warning: Heavy)",
      "category": "ZephrFish: Group Hunts",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p"
        }
      ]
    },
    {
      "name": "Groups that have local admin rights (Warning: Heavy)",
      "category": "ZephrFish: Group Hunts",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Users never logged on and account still active",
      "category": "ZephrFish: Password Hunts",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n "
        }
      ]
    },
    {
      "name": "Users logged in the last 90 days",
      "category": "ZephrFish: Password Hunts",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u"
        }
      ]
    },
    {
      "name": "Users with passwords last set in the last 90 days",
      "category": "ZephrFish: Password Hunts",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
        }
      ]
    },
    {
      "name": "Find if unprivileged users have rights to add members into groups",
      "category": "ZephrFish: Password Hunts",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p"
        }
      ]
    },
    {
      "name": "Find all users a part of the VPN group",
      "category": "ZephrFish: Password Hunts",
      "queryList": [
        {
          "final": true,
          "query": "Match p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return p"
        }
      ]
    },
    {
      "name": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate",
      "category": "ZephrFish: Delegation Attacks",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c"
        }
      ]
    },
    {
      "name": "Next steps (3 hops) from owned objects",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((c {owned: true})-[*1..3]->(s)) WHERE NOT c = s RETURN p"
        }
      ]
    },
    {
      "name": "Owned users with permissions against GPOs",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned:true})-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p"
        }
      ]
    },
    {
      "name": "Find all other Rights Domain Users shouldn't have",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(n:Computer) WHERE m.objectid ENDS WITH '-513' OR m.objectsid ENDS WITH '-515' OR m.objectsid ENDS WITH 'S-1-5-11' OR m.objectsid ENDS WITH 'S-1-1-0' RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Computers with administrative Domain Users",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:Group)-[r:AddMember|AdminTo|AllExtendedRights|AllowedToDelegate|CanRDP|Contains|ExecuteDCOM|ForceChangePassword|GenericAll|GenericWrite|GetChanges|GetChangesAll|HasSession|Owns|ReadLAPSPassword|SQLAdmin|TrustedBy|WriteDACL|WriteOwner|AddAllowedToAct|AllowedToAct]->(t) WHERE m.objectsid ENDS WITH '-513' OR m.objectsid ENDS WITH '-515' OR m.objectsid ENDS WITH 'S-1-5-11' OR m.objectsid ENDS WITH 'S-1-1-0' RETURN p"
        }
      ]
    },
    {
      "name": "List all owned computers",
      "category": "ZephrFish: Owned Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:Computer) WHERE m.owned=TRUE RETURN m"
        }
      ]
    },
    {
      "name": "List all owned groups",
      "category": "ZephrFish: Owned Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:Group) WHERE m.owned=TRUE RETURN m"
        }
      ]
    },
    {
      "name": "List all High Valued Targets",
      "category": "ZephrFish: Owned Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m) WHERE m.highvalue=TRUE RETURN m"
        }
      ]
    },
    {
      "name": "List the groups of all owned users",
      "category": "ZephrFish: Owned Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:User) WHERE m.owned=TRUE WITH m MATCH p=(m)-[:MemberOf*1..]->(n:Group) RETURN p"
        }
      ]
    },
    {
      "name": "Find all Kerberoastable Users",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User)WHERE n.hasspn=true RETURN n",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set less than 5 years ago",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u.name, u.pwdlastset order by u.pwdlastset "
        }
      ]
    },
    {
      "name": "Find Kerberoastable Users with a path to DA",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User {hasspn:true}) MATCH (g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = shortestPath( (u)-[*1..]->(g) ) RETURN p"
        }
      ]
    },
    {
      "name": "Find machines Domain Users can RDP into",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "match p=(g:Group)-[:CanRDP]->(c:Computer) where g.objectid ENDS WITH '-513' return p"
        }
      ]
    },
    {
      "name": "Find what groups can RDP",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Find groups that can reset passwords (Warning: Heavy)",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p"
        }
      ]
    },
    {
      "name": "Find groups that have local admin rights (Warning: Heavy)",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Find all users that have local admin rights (Warning Can Be Heavy)",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Find all users that have local admin rights or Groups (Warning Can Be Heavy)",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:User)-[r:AdminTo|MemberOf*1..]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Find all active Domain Admin sessions",
      "category": "ZephrFish: Admin Hunter",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = (c:Computer)-[:HasSession]->(n) return p"
        }
      ]
    },
    {
      "name": "Find all computers with Unconstrained Delegation",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer {unconstraineddelegation:true}) return c"
        }
      ]
    },
    {
      "name": "Find all computers with unsupported operating systems",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer) WHERE H.operatingsystem = '.*(2000|2003|2008|xp|vista|7|me).*' AND H.enabled = TRUE RETURN H"
        }
      ]
    },
    {
      "name": "Find users that logged in within the last 90 days",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u"
        }
      ]
    },
    {
      "name": "Find users with passwords last set within the last 90 days",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
        }
      ]
    },
    {
      "name": "Find constrained delegation",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User)-[:AllowedToDelegate]->(c:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Find computers that allow unconstrained delegation that AREN’T domain controllers.",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2"
        }
      ]
    },
    {
      "name": " Return the name of every computer in the database where at least one SPN for the computer contains the string 'MSSQL'",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') RETURN c"
        }
      ]
    },
    {
      "name": "View all GPOs",
      "category": "ZephrFish: GPO/Group Information",
      "queryList": [
        {
          "final": true,
          "query": "Match (n:GPO) RETURN n"
        }
      ]
    },
    {
      "name": "View all groups that contain the word 'admin'",
      "category": "ZephrFish: GPO/Group Information",
      "queryList": [
        {
          "final": true,
          "query": "Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n"
        }
      ]
    },
    {
      "name": "Find users that can be AS-REP roasted",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u"
        }
      ]
    },
    {
      "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set > 5 years ago",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
        }
      ]
    },
    {
      "name": "Show all high value target's groups",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p"
        }
      ]
    },
    {
      "name": "Find groups that contain both users and computers",
      "category": "ZephrFish: GPO/Group Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers"
        }
      ]
    },
    {
      "name": "Find Kerberoastable users who are members of high value groups",
      "category": "ZephrFish: GPO/Group Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User)-[r:MemberOf*1..]->(g:Group) WHERE g.highvalue=true AND u.hasspn=true RETURN u"
        }
      ]
    },
    {
      "name": "Find Kerberoastable users and where they are AdminTo",
      "category": "ZephrFish: GPO/Group Information",
      "queryList": [
        {
          "final": true,
          "query": "OPTIONAL MATCH (u1:User) WHERE u1.hasspn=true OPTIONAL MATCH (u1)-[r:AdminTo]->(c:Computer) RETURN u1"
        }
      ]
    },
    {
      "name": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate",
      "category": "ZephrFish: Domain Escalation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c"
        }
      ]
    },
    {
      "name": "Find Users/Groups with direct access to GPOs",
      "category": "ZephrFish: GPO/Group Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[r:AddMember|AddSelf|WriteSPN|AddKeyCredentialLink|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner|Owns]->(g:GPO) RETURN p"
        }
      ]
    },
    {
      "name": "Find if any domain user has interesting permissions against a GPO (Warning: Heavy)",
      "category": "ZephrFish: GPO/Group Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p"
        }
      ]
    },
    {
      "name": "Find if unprivileged users have rights to add members into groups",
      "category": "ZephrFish: GPO/Group Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p"
        }
      ]
    },
    {
      "name": "Find all users a part of the VPN group",
      "category": "ZephrFish: GPO/Group Information",
      "queryList": [
        {
          "final": true,
          "query": "Match p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return p"
        }
      ]
    },
    {
      "name": "Find users that have never logged on and account is still active",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n "
        }
      ]
    },
    {
      "name": "Find an object in one domain that can do something to a foreign object",
      "category": "ZephrFish: GPO/Group Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(n)-[r]->(m) WHERE NOT n.domain = m.domain RETURN p"
        }
      ]
    },
    {
      "name": "Find all sessions a user in a specific domain has",
      "category": "ZephrFish: User Information",
      "requireNodeSelect": true,
      "queryList": [
        {
          "final": false,
          "title": "Select source domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
        },
        {
          "final": true,
          "query": "MATCH p=(m:Computer)-[r:HasSession]->(n:User {domain:$result}) RETURN p",
          "startNode": "{}",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Find an object from domain 'A' that can do anything to a foreign object",
      "category": "ZephrFish: User Information",
      "requireNodeSelect": true,
      "queryList": [
        {
          "final": false,
          "title": "Select source domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
        },
        {
          "final": true,
          "query": "MATCH p=(n {domain:$result})-[r]->(d) WHERE NOT d.domain=n.domain RETURN p",
          "startNode": "{}",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Find All edges any owned user has on a computer",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((m:User)-[r*]->(b:Computer)) WHERE m.owned RETURN p"
        }
      ]
    },
    {
      "name": "Find Un-Supported OS and Enabled",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:Computer) WHERE n.operatingsystem =~ '(?i).*(2000|2003|2008|xp|vista|7|me).*' AND n.enabled = true RETURN n"
        }
      ]
    },
    {
      "name": "Find Server 2008 with session",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2008).*' RETURN H"
        }
      ]
    },
    {
      "name": "Find Windows XP and Enabled",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(xp).*' AND H.enabled = true RETURN H"
        }
      ]
    },
    {
      "name": "Find Windows XP with session",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(xp).*' RETURN H"
        }
      ]
    },
    {
      "name": "Find Windows 7 and Enabled",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(7).*' AND H.enabled = true RETURN H"
        }
      ]
    },
    {
      "name": "Find Windows 7 session",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(7).*' RETURN H"
        }
      ]
    },
    {
      "name": "Find Server 2012 and Enabled",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2012).*' AND H.enabled = true RETURN H"
        }
      ]
    },
    {
      "name": "Find Server 2012 with session",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2012).*' RETURN H"
        }
      ]
    },
    {
      "name": "Find Server 2016 and Enabled",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2016).*' AND H.enabled = true RETURN H"
        }
      ]
    },
    {
      "name": "Find Server 2016 with session",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2016).*' RETURN H"
        }
      ]
    },
    {
      "name": "Find Server 2019 and Enabled",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2019).*' AND H.enabled = true RETURN H"
        }
      ]
    },
    {
      "name": "Find Server 2019 with session",
      "category": "ZephrFish: OS Finder",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2019).*' RETURN H"
        }
      ]
    },
    {
      "name": "All Users with a homedirectory",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.homedirectory =~ '(?i).*.*' RETURN p"
        }
      ]
    },
    {
      "name": "All Computers without LAPS - with session",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer)-[:HasSession]->(y) WHERE c.haslaps = false RETURN p"
        }
      ]
    },
    {
      "name": "All computers without LAPS and the computer is enabled",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.haslaps = false AND c.enabled = true RETURN p"
        }
      ]
    },
    {
      "name": "All enabled computers with a description",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.description =~ '(?i).*.*' RETURN p"
        }
      ]
    },
    {
      "name": "All enabled computers with a description containing the word file",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.description =~ '(?i).*file.*' RETURN p"
        }
      ]
    },
    {
      "name": "Locate enabled accounts with display name of admin - put anyname in you like",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.displayname =~ '(?i).*admin*' AND u.enabled = true RETURN p"
        }
      ]
    },
    {
      "name": "Find all users with passwords set over 720 days ago (23 months)",
      "category": "ZephrFish: Password Last Set",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.enabled=true AND u.pwdlastset < (datetime().epochseconds - (720 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
        }
      ]
    },
    {
      "name": "Find all users with passwords set over 1440 days ago (47 months)",
      "category": "ZephrFish: Password Last Set",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.enabled=true AND u.pwdlastset < (datetime().epochseconds - (1440 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
        }
      ]
    },
    {
      "name": "Find all Domain Admins (nested SID S-1-5-21-.*-512) having a session opened on a domain computer",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:User)-[r:MemberOf*1..]->(n:Group) WHERE n.objectid =~ '(?i)S-1-5-.*-512' WITH m MATCH q=((m)<-[:HasSession]-(o:Computer)) RETURN q"
        }
      ]
    },
    {
      "name": "Find users that have never logged on and account is still active",
      "category": "ZephrFish: Password Last Set",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n "
        }
      ]
    },
    {
      "name": "Find users that haven't logged on in 720 days and account is still active",
      "category": "ZephrFish: Password Last Set",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User) WHERE n.lastlogontimestamp < (datetime().epochseconds - (720 * 86400)) AND n.enabled=TRUE RETURN n "
        }
      ]
    },
    {
      "name": "Search for key words in users title such as scientist or Executive - tweak as required",
      "category": "ZephrFish: User Information",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.title =~ '(?i).*scientist*' AND u.enabled = true RETURN p"
        }
      ]
    }
  ]
}
